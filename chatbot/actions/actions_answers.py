import random
from typing import Text
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet, SessionStarted, ActionExecuted
import logging


logger = logging.getLogger()
logger.setLevel(logging.DEBUG)


BUTTON_TYPE = "inline"
MAIN_BUTTONS = [
    {
        "english": "Documents",
        "russian": "–î–æ–∫—É–º–µ–Ω—Ç—ã",
        "payload": "/documents",
    },
    {
        "english": "Set up your company",
        "russian": "–û—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å",
        "payload": "/set_up_company",
    },
    {
        "english": "Taxation",
        "russian": "–ù–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–µ",
        "payload": "/taxation",
    },
]
END_SCRIPT_BUTTONS = [
    {
        "english": "Back",
        "russian": "–ù–∞–∑–∞–¥",
        "payload": "/back",
    },
    {
        "english": "Thanks",
        "russian": "–°–ø–∞—Å–∏–±–æ",
        "payload": "/thanks",
    },
]
DOCUMENTS_BUTTONS = [
    {
        "english": "–í–∏–∑—ã –¥–ª—è –≤—ä–µ–∑–¥–∞",
        "russian": "Visas for entry",
        "payload": "/entry_visas",
    },
    {
        "english": "–°–ø—Ä–∞–≤–∫–∞ –æ –Ω–µ—Å—É–¥–∏–º–æ—Å—Ç–∏",
        "russian": "Police clearance certificate",
        "payload": "/police_clearance",
    },
    {
        "english": "–ü–µ—Ä–µ–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
        "russian": "Translation of documents",
        "payload": "/translation",
    },
    {
        "english": "–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å",
        "russian": "Another question",
        "payload": "/another_question",
    },
]


class ActionMain(Action):

    TEXTS_EN = [
        "Write your question or choose one of the sections.",
        "Click on the appropriate section or write a question.",
        "Choose one of the buttons or ask your question.",
    ]
    TEXTS_RU = [
        "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤.",
        "–ö–ª–∏–∫–Ω–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å.",
        "–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –∑–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.",
    ]

    def name(self) -> Text:
        return "action_main"

    def run(self, dispatcher, tracker, domain):
        if tracker.get_slot("language") == "english":
            answer = random.choice(self.TEXTS_EN)
            buttons = [{"payload": button.get("payload"), "title": button.get("english")} for button in MAIN_BUTTONS]
        else:
            answer = random.choice(self.TEXTS_RU)
            buttons = [{"payload": button.get("payload"), "title": button.get("russian")} for button in MAIN_BUTTONS]
        dispatcher.utter_message(text=answer, buttons=buttons, button_type=BUTTON_TYPE)
        return []


class ActionAnyQuestions(Action):

    TEXTS_EN = [
        "Do you want to know something else?",
        "Curious to know anything else?",
        "Do you have more questions?",
    ]
    TEXTS_RU = [
        "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?",
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?",
        "–û—Å—Ç–∞–ª–∏—Å—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã?",
    ]

    def name(self) -> Text:
        return "action_any_questions"

    def run(self, dispatcher, tracker, domain):
        if tracker.get_slot("language") == "english":
            answer = random.choice(self.TEXTS_EN)
            buttons = [{"payload": button.get("payload"), "title": button.get("english")} for button in MAIN_BUTTONS]
        else:
            answer = random.choice(self.TEXTS_RU)
            buttons = [{"payload": button.get("payload"), "title": button.get("russian")} for button in MAIN_BUTTONS]
        dispatcher.utter_message(text=answer, buttons=buttons, button_type=BUTTON_TYPE)
        return [SlotSet("main_state", True)]


class ActionHelp(Action):
    
    TEXT_EN = (
        "I can provide you with useful information for life in Cyprus! ‚òÄÔ∏è\n"
        "Choose one of the sections to get started or write your own question:"
    )
    TEXT_RU = (
        "–Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∂–∏–∑–Ω–∏ –Ω–∞ –ö–∏–ø—Ä–µ! ‚òÄÔ∏è\n"
        "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:"
    )

    def name(self) -> Text:
        return "action_help"

    def run(self, dispatcher, tracker, domain):
        if tracker.get_slot("language") == "english":
            answer = self.TEXT_EN
            buttons = [{"payload": button.get("payload"), "title": button.get("english")} for button in MAIN_BUTTONS]
        else:
            answer = self.TEXT_RU
            buttons = [{"payload": button.get("payload"), "title": button.get("russian")} for button in MAIN_BUTTONS]
        dispatcher.utter_message(text=answer, buttons=buttons, button_type=BUTTON_TYPE)
        return []


class ActionAnotherQuestion(Action):

    TEXT_EN = (
        "What do you want to know?What do you want to know?"
    )
    TEXT_RU = (
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?"
    )

    def name(self) -> Text:
        return "action_another_question"

    def run(self, dispatcher, tracker, domain):
        if tracker.get_slot("language") == "english":
            answer = self.TEXT_EN
            buttons = [{"payload": button.get("payload"), "title": button.get("english")} for button in MAIN_BUTTONS]
        else:
            answer = self.TEXT_RU
            buttons = [{"payload": button.get("payload"), "title": button.get("russian")} for button in MAIN_BUTTONS]
        dispatcher.utter_message(text=answer, buttons=buttons, button_type=BUTTON_TYPE)
        return []


class ActionDocuments(Action):

    TEXTS_EN = [
        "Click the button and find out more:",
        "To read the information, click on one of the buttons:",
        "Select the button and find out the details:",
    ]
    TEXTS_RU = [
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ —É–∑–Ω–∞–π –ø–æ–¥—Ä–æ–±–Ω–µ–µ:",
        "–ß—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:",
        "–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏ —É–∑–Ω–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:",
    ]

    def name(self) -> Text:
        return "action_documents"

    def run(self, dispatcher, tracker, domain):
        if tracker.get_slot("language") == "english":
            answer = random.choice(self.TEXTS_EN)
            buttons = [{"payload": button.get("payload"), "title": button.get("english")} for button in DOCUMENTS_BUTTONS]
        else:
            answer = random.choice(self.TEXTS_RU)
            buttons = [{"payload": button.get("payload"), "title": button.get("russian")} for button in DOCUMENTS_BUTTONS]
        dispatcher.utter_message(text=answer, buttons=buttons, button_type=BUTTON_TYPE)
        return []


class ActionVisas(Action):
    
    TEXT_EN = (
        "Citizens of EU countries and holders of residence permits of these countries don't need a visa to enter Cyprus.\n"
        "Third-country nationals can enter Cyprus with a Schengen visa or with a Cypriot national visa.\n"
        "To find complete information about visas and rules for staying in Cyprus, you can check the website of the Migration Department:\n"
        "http://www.moi.gov.cy/moi/crmd/crmd.nsf/home_en/home_en?openform#"
    )
    TEXT_RU = (
        "–î–ª—è –≥—Ä–∞–∂–¥–∞–Ω —Å—Ç—Ä–∞–Ω –ï–≤—Ä–æ—Å–æ—é–∑–∞ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –í–ù–ñ —ç—Ç–∏—Ö —Å—Ç—Ä–∞–Ω –Ω–µ –Ω—É–∂–Ω–∞ –≤–∏–∑–∞ –¥–ª—è –≤—ä–µ–∑–¥–∞ –Ω–∞ –ö–∏–ø—Ä.\n"
        "–ì—Ä–∞–∂–¥–∞–Ω–µ —Ç—Ä–µ—Ç—å–∏—Ö —Å—Ç—Ä–∞–Ω –º–æ–≥—É—Ç –≤—ä–µ—Ö–∞—Ç—å –Ω–∞ –ö–∏–ø—Ä –ø–æ –®–µ–Ω–≥–µ–Ω—Å–∫–æ–π –≤–∏–∑–µ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏–≤ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –≤–∏–∑—É –ö–∏–ø—Ä–∞.\n"
        "–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∏–∑–∞–º –∏ –ø—Ä–∞–≤–∏–ª–∞–º –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –Ω–∞ –ö–∏–ø—Ä–µ, –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞: http://www.moi.gov.cy/moi/crmd/crmd.nsf/home_en/home_en?openform#"
   )

    def name(self) -> Text:
        return "action_visas"

    def run(self, dispatcher, tracker, domain):
        if tracker.get_slot("language") == "english":
            answer = self.TEXT_EN
            buttons = [{"payload": button.get("payload"), "title": button.get("english")} for button in END_SCRIPT_BUTTONS]
        else:
            answer = self.TEXT_RU
            buttons = [{"payload": button.get("payload"), "title": button.get("russian")} for button in END_SCRIPT_BUTTONS]
        dispatcher.utter_message(text=answer, buttons=buttons, button_type=BUTTON_TYPE)
        return []


class ActionPoliceClearance(Action):
    
    TEXT_EN = (
        "‚öñÔ∏è –°–ø—Ä–∞–≤–∫–∞ –æ –Ω–µ—Å—É–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ –ö–∏–ø—Ä–µ\n"
        "–ü—Ä–æ–∂–∏–≤ –Ω–∞ –ö–∏–ø—Ä–µ –ø–æ–ª–≥–æ–¥–∞ –∏ –±–æ–ª–µ–µ, –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–∏–ø—Ä—Å–∫—É—é —Å–ø—Ä–∞–≤–∫—É –æ –Ω–µ—Å—É–¥–∏–º–æ—Å—Ç–∏.\n"
        "–°–ø—Ä–∞–≤–∫–∞ –≤—ã–¥–∞—ë—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –æ—Ç–¥–µ–ª–µ–Ω–∏–∏ –ø–æ–ª–∏—Ü–∏–∏ –≤ –ù–∏–∫–æ—Å–∏–∏ –ø–æ –±—É–¥–Ω—è–º –¥–æ 15:00. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ.\n"
        "–°–∫–∞—á–∞—Ç—å —Ñ–æ—Ä–º—É\n"
        "üìç –ê–¥—Ä–µ—Å: Cyprus Police Headquarters Nicosia 1478, Cyprus\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +357 (22) 808944\n\n"
        "http://www.police.gov.cy\n"
        "‚ùó–ü—Ä–∏ —Å–µ–±–µ –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –∫–æ–ø–∏–∏ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—ã –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç–∞ –∏ PinkSlip."
    )
    TEXT_RU = (
        "‚öñÔ∏è Police clearance certificate in Cyprus\n"
        "Having lived in Cyprus for six months or more, you can get a Cypriot certificate of good conduct.\n"
        "The certificate is issued at the main police station in Nicosia on weekdays until 15:00. To receive a certificate, you must fill out and sign an application.\n"
        "Download form\n"
        "üìç Address: Cyprus Police Headquarters Nicosia 1478, Cyprus\n"
        "Phone: +357 (22) 808944\n\n"
        "http://www.police.gov.cy\n"
        "‚ùóYou need to have copies and originals of your passport and PinkSlip with you."
   )

    def name(self) -> Text:
        return "action_police_clearance"

    def run(self, dispatcher, tracker, domain):
        if tracker.get_slot("language") == "english":
            answer = self.TEXT_EN
            buttons = [{"payload": button.get("payload"), "title": button.get("english")} for button in END_SCRIPT_BUTTONS]
        else:
            answer = self.TEXT_RU
            buttons = [{"payload": button.get("payload"), "title": button.get("russian")} for button in END_SCRIPT_BUTTONS]
        dispatcher.utter_message(text=answer, buttons=buttons, button_type=BUTTON_TYPE)
        return []


class ActionTranslation(Action):
    
    TEXT_EN = (
        "üí¨ If you need to translate documents, you can find a certified translator in the registry: https://www.pio.gov.cy/en/register-of-sworn-translators.html"
    )
    TEXT_RU = (
        "üí¨ –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–µ—Å—Ç—Ä –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–≤ –Ω–∞ –ö–∏–ø—Ä–µ: https://www.pio.gov.cy/en/register-of-sworn-translators.html"
   )

    def name(self) -> Text:
        return "action_translation"

    def run(self, dispatcher, tracker, domain):
        if tracker.get_slot("language") == "english":
            answer = self.TEXT_EN
            buttons = [{"payload": button.get("payload"), "title": button.get("english")} for button in END_SCRIPT_BUTTONS]
        else:
            answer = self.TEXT_RU
            buttons = [{"payload": button.get("payload"), "title": button.get("russian")} for button in END_SCRIPT_BUTTONS]
        dispatcher.utter_message(text=answer, buttons=buttons, button_type=BUTTON_TYPE)
        return []
